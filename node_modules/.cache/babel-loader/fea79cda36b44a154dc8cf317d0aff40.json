{"ast":null,"code":"var _jsxFileName = \"/home/alvaradof/cursoSolidity/solidity-liquidity-staking-front/src/context/DropFactory/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\"; //import DropFactoryContract from \"../../Contracts/NftDrop.json\";\n\nimport StakingRewardsFactoryContract from \"../../Contracts/StakingRewards.json\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StakingRewardsFactoryContext = /*#__PURE__*/createContext();\nexport function StakingRewardsFactoryProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const address = StakingRewardsFactoryContract.address;\n  const abi = StakingRewardsFactoryContract.abi;\n  const [StakingRewardsFactory, setStakingRewardsFactory] = useState(null);\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const StakingRewardsFactoryContract = new ethers.Contract(address, abi, signer);\n    setStakingRewardsFactory(StakingRewardsFactoryContract);\n  }, [abi, address]);\n\n  const addLiq = async (_tokenB, _amountTokenB, _amountTokenMin, _amountEthMin) => {\n    try {\n      const tx = await StakingRewardsFactory.addLiquidityEth(_tokenB, _amountTokenB, _amountTokenMin, _amountEthMin, {\n        gasLimit: 750000,\n        value: ethers.utils.parseEther(amountEth)\n      });\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StakingRewardsFactoryContext.Provider, {\n    value: {\n      address,\n      abi,\n      StakingRewardsFactory,\n      addLiq\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StakingRewardsFactoryProvider, \"4p4SvdhB1ZJPKGtbW+le9+h5fmY=\");\n\n_c = StakingRewardsFactoryProvider;\nexport default StakingRewardsFactoryContext;\n/*\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport { ethers } from \"ethers\";\n\nconst DropFactoryContext = createContext();\n\nexport function DropFactoryProvider({ children }) {\n  const address = DropFactoryContract.address;\n  const abi = DropFactoryContract.abi;\n  const [dropFactory, setDropFactory] = useState(null);\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const dropFactoryContract = new ethers.Contract(address, abi, signer);\n    setDropFactory(dropFactoryContract);\n  }, [abi, address]);\n\n  const createDrop = async (\n    maxSupply,\n    name,\n    cid,\n    prefix,\n    sufix,\n    hiddenURI,\n    maxPerTx\n  ) => {\n    try {\n      const tx = await dropFactory.createDrop(\n        ethers.BigNumber.from(maxSupply),\n        name,\n        cid,\n        prefix,\n        sufix,\n        hiddenURI,\n        ethers.BigNumber.from(maxPerTx)\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop create succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const totalDrops = async () => {\n    return await dropFactory?.totalDrops();\n  };\n  const getAllDrops = async () => {\n    const dropsCount = await totalDrops();\n    const allDrops = [];\n    for (let i = 0; i < dropsCount; i++) {\n      const drop = await dropFactory.drops(i);\n      allDrops.push(drop);\n    }\n    return allDrops;\n  };\n  const getDropById = async (dropId) => {\n    return await dropFactory?.drops(dropId);\n  };\n  const mintDrop = async (dropId, mintAmount) => {\n    try {\n      const tx = await dropFactory.mint(\n        dropId,\n        ethers.BigNumber.from(mintAmount),\n        {\n          gasLimit: 750000,\n          value: ethers.utils.parseEther(\"0.01\").mul(mintAmount),\n        }\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"mint succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const revealDrop = async(dropId) => {\n    try {\n      const tx = await dropFactory.defineDrop(dropId);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop revealed\" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return (\n    <DropFactoryContext.Provider\n      value={{\n        address,\n        abi,\n        getAllDrops,\n        dropFactory,\n        createDrop,\n        totalDrops,\n        getDropById,\n        mintDrop,\n    revealDrop\n      }}\n    >\n      {children}\n    </DropFactoryContext.Provider>\n  );\n}\nexport default DropFactoryContext;\n\n\n\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"StakingRewardsFactoryProvider\");","map":{"version":3,"sources":["/home/alvaradof/cursoSolidity/solidity-liquidity-staking-front/src/context/DropFactory/index.jsx"],"names":["React","createContext","useEffect","useState","StakingRewardsFactoryContract","ethers","StakingRewardsFactoryContext","StakingRewardsFactoryProvider","children","address","abi","StakingRewardsFactory","setStakingRewardsFactory","ethereum","window","alert","provider","providers","Web3Provider","signer","getSigner","Contract","addLiq","_tokenB","_amountTokenB","_amountTokenMin","_amountEthMin","tx","addLiquidityEth","gasLimit","value","utils","parseEther","amountEth","error","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D,C,CACA;;AACA,OAAOC,6BAAP,MAA0C,qCAA1C;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAGA,MAAMC,4BAA4B,gBAAGL,aAAa,EAAlD;AAEA,OAAO,SAASM,6BAAT,OAAqD;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC1D,QAAMC,OAAO,GAAGL,6BAA6B,CAACK,OAA9C;AACA,QAAMC,GAAG,GAAGN,6BAA6B,CAACM,GAA1C;AACA,QAAM,CAACC,qBAAD,EAAwBC,wBAAxB,IAAoDT,QAAQ,CAAC,IAAD,CAAlE;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEW,MAAAA;AAAF,QAAeC,MAArB;AACA,QAAI,CAACD,QAAL,EAAe,OAAOE,KAAK,CAAC,kBAAD,CAAZ;AACf,UAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;AACA,UAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMhB,6BAA6B,GAAG,IAAIC,MAAM,CAACgB,QAAX,CAAoBZ,OAApB,EAA6BC,GAA7B,EAAkCS,MAAlC,CAAtC;AACAP,IAAAA,wBAAwB,CAACR,6BAAD,CAAxB;AACD,GAPQ,EAON,CAACM,GAAD,EAAMD,OAAN,CAPM,CAAT;;AASA,QAAMa,MAAM,GAAG,OACXC,OADW,EAEbC,aAFa,EAGbC,eAHa,EAIbC,aAJa,KAKN;AACP,QAAI;AACF,YAAMC,EAAE,GAAG,MAAMhB,qBAAqB,CAACiB,eAAtB,CACfL,OADe,EAEfC,aAFe,EAGfC,eAHe,EAIfC,aAJe,EAKf;AACEG,QAAAA,QAAQ,EAAE,MADZ;AAEEC,QAAAA,KAAK,EAAEzB,MAAM,CAAC0B,KAAP,CAAaC,UAAb,CAAwBC,SAAxB;AAFT,OALe,CAAjB;AAWD,KAZD,CAYE,OAAOC,KAAP,EAAc;AACdnB,MAAAA,KAAK,CAACmB,KAAK,CAACC,OAAP,CAAL;AACD;AACF,GArBD;;AA2BA,sBACE,QAAC,4BAAD,CAA8B,QAA9B;AACE,IAAA,KAAK,EAAE;AACL1B,MAAAA,OADK;AAELC,MAAAA,GAFK;AAGLC,MAAAA,qBAHK;AAILW,MAAAA;AAJK,KADT;AAAA,cAQGd;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GApDeD,6B;;KAAAA,6B;AAqDhB,eAAeD,4BAAfsourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n//import DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport StakingRewardsFactoryContract from \"../../Contracts/StakingRewards.json\";\nimport { ethers } from \"ethers\";\n\n\nconst StakingRewardsFactoryContext = createContext();\n\nexport function StakingRewardsFactoryProvider({ children }) {\n  const address = StakingRewardsFactoryContract.address;\n  const abi = StakingRewardsFactoryContract.abi;\n  const [StakingRewardsFactory, setStakingRewardsFactory] = useState(null);\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const StakingRewardsFactoryContract = new ethers.Contract(address, abi, signer);\n    setStakingRewardsFactory(StakingRewardsFactoryContract);\n  }, [abi, address]);\n\n  const addLiq = async (\n      _tokenB,\n\t\t  _amountTokenB,\n\t\t  _amountTokenMin,\n\t\t  _amountEthMin,\n      ) => {\n    try {\n      const tx = await StakingRewardsFactory.addLiquidityEth(\n        _tokenB,\n        _amountTokenB,\n        _amountTokenMin,\n        _amountEthMin,\n        {\n          gasLimit: 750000,\n          value: ethers.utils.parseEther(amountEth),\n        }\n        \n      );\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n \n \n  \n  \n\n  return (\n    <StakingRewardsFactoryContext.Provider\n      value={{\n        address,\n        abi,\n        StakingRewardsFactory,\n        addLiq\n      }}\n    >\n      {children}\n    </StakingRewardsFactoryContext.Provider>\n  );\n}\nexport default StakingRewardsFactoryContext;\n\n/*\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport { ethers } from \"ethers\";\n\nconst DropFactoryContext = createContext();\n\nexport function DropFactoryProvider({ children }) {\n  const address = DropFactoryContract.address;\n  const abi = DropFactoryContract.abi;\n  const [dropFactory, setDropFactory] = useState(null);\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const dropFactoryContract = new ethers.Contract(address, abi, signer);\n    setDropFactory(dropFactoryContract);\n  }, [abi, address]);\n\n  const createDrop = async (\n    maxSupply,\n    name,\n    cid,\n    prefix,\n    sufix,\n    hiddenURI,\n    maxPerTx\n  ) => {\n    try {\n      const tx = await dropFactory.createDrop(\n        ethers.BigNumber.from(maxSupply),\n        name,\n        cid,\n        prefix,\n        sufix,\n        hiddenURI,\n        ethers.BigNumber.from(maxPerTx)\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop create succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const totalDrops = async () => {\n    return await dropFactory?.totalDrops();\n  };\n  const getAllDrops = async () => {\n    const dropsCount = await totalDrops();\n    const allDrops = [];\n    for (let i = 0; i < dropsCount; i++) {\n      const drop = await dropFactory.drops(i);\n      allDrops.push(drop);\n    }\n    return allDrops;\n  };\n  const getDropById = async (dropId) => {\n    return await dropFactory?.drops(dropId);\n  };\n  const mintDrop = async (dropId, mintAmount) => {\n    try {\n      const tx = await dropFactory.mint(\n        dropId,\n        ethers.BigNumber.from(mintAmount),\n        {\n          gasLimit: 750000,\n          value: ethers.utils.parseEther(\"0.01\").mul(mintAmount),\n        }\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"mint succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const revealDrop = async(dropId) => {\n    try {\n      const tx = await dropFactory.defineDrop(dropId);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop revealed\" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return (\n    <DropFactoryContext.Provider\n      value={{\n        address,\n        abi,\n        getAllDrops,\n        dropFactory,\n        createDrop,\n        totalDrops,\n        getDropById,\n        mintDrop,\n    revealDrop\n      }}\n    >\n      {children}\n    </DropFactoryContext.Provider>\n  );\n}\nexport default DropFactoryContext;\n\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}