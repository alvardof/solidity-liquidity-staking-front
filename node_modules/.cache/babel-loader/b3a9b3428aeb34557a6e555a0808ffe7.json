{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gorka\\\\Documents\\\\Solidity Course\\\\front2\\\\solidity-liquidity-staking-front-1\\\\src\\\\views\\\\Main\\\\index.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport WalletContext from \"../../context/Wallet\";\nimport DropFactoryContext from \"../../context/DropFactory\";\nimport useToggle from \"../../hooks/useToggle.js\";\nimport useForm from \"../../hooks/useForm.js\";\nimport DropCard from \"../../components/DropsCard\";\nimport CreateDrop from '../../components/DropForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConnectWalletButton = () => {\n  _s();\n\n  const {\n    connectWalletHandler\n  } = useContext(WalletContext);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWalletHandler,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConnectWalletButton, \"tE1RydMkyfPgqLiLLmxvQ7EqnjY=\");\n\n_c = ConnectWalletButton;\n\nconst Main = () => {\n  _s2();\n\n  const {\n    currentAccount\n  } = useContext(WalletContext);\n  const {\n    totalDrops,\n    getAllDrops\n  } = useContext(DropFactoryContext);\n  const [dropsCount, setDropsCount] = useState(0);\n  const [drops, setDrops] = useState([]);\n  useEffect(() => {\n    if (totalDrops) {\n      const dropsNumber = totalDrops();\n      const allDrops = getAllDrops();\n      Promise.all([dropsNumber, allDrops]).then(e => {\n        var _e$;\n\n        setDropsCount((_e$ = e[0]) === null || _e$ === void 0 ? void 0 : _e$.toString());\n        setDrops(e[1]);\n      });\n    } //eslint-disable-next-line\n\n  }, [getAllDrops, totalDrops]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"add liquidy \", dropsCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), currentAccount ? /*#__PURE__*/_jsxDEV(CreateDrop, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(ConnectWalletButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drops-grid\",\n      children: drops.map((drop, index) => {\n        return /*#__PURE__*/_jsxDEV(DropCard, {\n          dropId: index,\n          drop: drop\n        }, index + drop.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Main, \"UO8nuemSkKk/tk5YVRL780ffl0o=\");\n\n_c2 = Main;\nexport default Main;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ConnectWalletButton\");\n$RefreshReg$(_c2, \"Main\");","map":{"version":3,"sources":["C:/Users/gorka/Documents/Solidity Course/front2/solidity-liquidity-staking-front-1/src/views/Main/index.jsx"],"names":["React","useContext","useEffect","useState","WalletContext","DropFactoryContext","useToggle","useForm","DropCard","CreateDrop","ConnectWalletButton","connectWalletHandler","Main","currentAccount","totalDrops","getAllDrops","dropsCount","setDropsCount","drops","setDrops","dropsNumber","allDrops","Promise","all","then","e","toString","map","drop","index","name"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAA2BV,UAAU,CAACG,aAAD,CAA3C;AAEA,sBACE;AACE,IAAA,OAAO,EAAEO,oBADX;AAEE,IAAA,SAAS,EAAC,kCAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAXD;;GAAMD,mB;;KAAAA,mB;;AAcN,MAAME,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAAqBZ,UAAU,CAACG,aAAD,CAArC;AACA,QAAM;AAAEU,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA8Bd,UAAU,CAACI,kBAAD,CAA9C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,UAAJ,EAAgB;AACd,YAAMM,WAAW,GAAGN,UAAU,EAA9B;AACA,YAAMO,QAAQ,GAAGN,WAAW,EAA5B;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACH,WAAD,EAAcC,QAAd,CAAZ,EAAqCG,IAArC,CAA2CC,CAAD,IAAO;AAAA;;AAC/CR,QAAAA,aAAa,QAACQ,CAAC,CAAC,CAAD,CAAF,wCAAC,IAAMC,QAAN,EAAD,CAAb;AACAP,QAAAA,QAAQ,CAACM,CAAC,CAAC,CAAD,CAAF,CAAR;AACD,OAHD;AAID,KATa,CAUd;;AACD,GAXQ,EAWN,CAACV,WAAD,EAAcD,UAAd,CAXM,CAAT;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAA,iCAAiBE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGH,cAAc,gBAAG,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAoB,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,YAFrC,eAGE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBACGK,KAAK,CAACS,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1B,4BAAO,QAAC,QAAD;AAAU,UAAA,MAAM,EAAEA,KAAlB;AAAiD,UAAA,IAAI,EAAED;AAAvD,WAA8BC,KAAK,GAAGD,IAAI,CAACE,IAA3C;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA9BD;;IAAMlB,I;;MAAAA,I;AAgCN,eAAeA,IAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport WalletContext from \"../../context/Wallet\";\r\nimport DropFactoryContext from \"../../context/DropFactory\";\r\nimport useToggle from \"../../hooks/useToggle.js\";\r\nimport useForm from \"../../hooks/useForm.js\";\r\nimport DropCard from \"../../components/DropsCard\";\r\nimport CreateDrop from '../../components/DropForm';\r\n\r\nconst ConnectWalletButton = () => {\r\n  const { connectWalletHandler } = useContext(WalletContext);\r\n\r\n  return (\r\n    <button\r\n      onClick={connectWalletHandler}\r\n      className=\"cta-button connect-wallet-button\"\r\n    >\r\n      Connect Wallet\r\n    </button>\r\n  );\r\n};\r\n\r\n\r\nconst Main = () => {\r\n  const { currentAccount } = useContext(WalletContext);\r\n  const { totalDrops, getAllDrops } = useContext(DropFactoryContext);\r\n  const [dropsCount, setDropsCount] = useState(0);\r\n  const [drops, setDrops] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (totalDrops) {\r\n      const dropsNumber = totalDrops();\r\n      const allDrops = getAllDrops();\r\n\r\n      Promise.all([dropsNumber, allDrops]).then((e) => {\r\n        setDropsCount(e[0]?.toString());\r\n        setDrops(e[1]);\r\n      });\r\n    }\r\n    //eslint-disable-next-line\r\n  }, [getAllDrops, totalDrops]);\r\n\r\n  return (\r\n    <div className=\"main-app\">\r\n      <h1>add liquidy {dropsCount}</h1>\r\n      {currentAccount ? <CreateDrop /> : <ConnectWalletButton />}\r\n      <div className=\"drops-grid\">\r\n        {drops.map((drop, index) => {\r\n          return <DropCard dropId={index} key={index + drop.name} drop={drop} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}