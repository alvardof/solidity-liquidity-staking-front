{"ast":null,"code":"var _jsxFileName = \"/home/racso/Programming/solidity-stake/solidity-liquidity-staking-front/src/context/Wallet/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext();\nexport function WalletProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [signer, setSigner] = useState(null);\n\n  const checkWalletIsConnected = () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) return alert(\"install metamask\");\n    connectWalletHandler();\n  };\n\n  const connectWalletHandler = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) return alert(\"make sure have metamask installed\");\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      if (!accounts.length) return alert(\"authorized account nor found\");\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      return alert(error.message);\n    }\n  };\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    setSigner(provider.getSigner());\n  }, [currentAccount]);\n  useEffect(() => {\n    checkWalletIsConnected(); //eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      currentAccount,\n      connectWalletHandler\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WalletProvider, \"XoLgtYCj5mxAFYWNTfRa2M/IANg=\");\n\n_c = WalletProvider;\nexport default WalletContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"sources":["/home/racso/Programming/solidity-stake/solidity-liquidity-staking-front/src/context/Wallet/index.jsx"],"names":["React","useState","createContext","useEffect","ethers","WalletContext","WalletProvider","children","currentAccount","setCurrentAccount","signer","setSigner","checkWalletIsConnected","ethereum","window","alert","connectWalletHandler","accounts","request","method","length","error","message","provider","providers","Web3Provider","getSigner"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,MAAMC,aAAa,gBAAGH,aAAa,EAAnC;AAEA,OAAO,SAASI,cAAT,OAAsC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC3C,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,IAAD,CAApC;;AAEA,QAAMW,sBAAsB,GAAG,MAAM;AACnC,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;AACA,QAAI,CAACD,QAAL,EAAe,OAAOE,KAAK,CAAC,kBAAD,CAAZ;AACfC,IAAAA,oBAAoB;AACrB,GAJD;;AAMA,QAAMA,oBAAoB,GAAG,YAAY;AACvC,QAAI;AACF,YAAM;AAAEH,QAAAA;AAAF,UAAeC,MAArB;AACA,UAAI,CAACD,QAAL,EAAe,OAAOE,KAAK,CAAC,mCAAD,CAAZ;AACf,YAAME,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AACtCC,QAAAA,MAAM,EAAE;AAD8B,OAAjB,CAAvB;AAGA,UAAI,CAACF,QAAQ,CAACG,MAAd,EAAsB,OAAOL,KAAK,CAAC,8BAAD,CAAZ;AACtBN,MAAAA,iBAAiB,CAACQ,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACD,KARD,CAQE,OAAOI,KAAP,EAAc;AACd,aAAON,KAAK,CAACM,KAAK,CAACC,OAAP,CAAZ;AACD;AACF,GAZD;;AAaAnB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEU,MAAAA;AAAF,QAAeC,MAArB;AACA,QAAI,CAACD,QAAL,EAAe,OAAOE,KAAK,CAAC,kBAAD,CAAZ;AACf,UAAMQ,QAAQ,GAAG,IAAInB,MAAM,CAACoB,SAAP,CAAiBC,YAArB,CAAkCZ,QAAlC,CAAjB;AACAF,IAAAA,SAAS,CAACY,QAAQ,CAACG,SAAT,EAAD,CAAT;AACD,GALQ,EAKN,CAAClB,cAAD,CALM,CAAT;AAOAL,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,sBAAsB,GADR,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,cAAF;AAAkBQ,MAAAA;AAAlB,KAA/B;AAAA,cACGT;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAxCeD,c;;KAAAA,c;AAyChB,eAAeD,aAAf","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst WalletContext = createContext();\n\nexport function WalletProvider({ children }) {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [signer, setSigner] = useState(null);\n\n  const checkWalletIsConnected = () => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"install metamask\");\n    connectWalletHandler();\n  };\n\n  const connectWalletHandler = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) return alert(\"make sure have metamask installed\");\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      if (!accounts.length) return alert(\"authorized account nor found\");\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      return alert(error.message);\n    }\n  };\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    setSigner(provider.getSigner());\n  }, [currentAccount]);\n\n  useEffect(() => {\n    checkWalletIsConnected();\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <WalletContext.Provider value={{ currentAccount, connectWalletHandler }}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\nexport default WalletContext;\n"]},"metadata":{},"sourceType":"module"}