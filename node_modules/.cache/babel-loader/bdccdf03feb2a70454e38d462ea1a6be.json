{"ast":null,"code":"var _jsxFileName = \"/home/alvaradof/cursoSolidity/solidity-liquidity-staking-front/src/context/StakingRewardsFactory/index.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\"; //import DropFactoryContract from \"../../Contracts/NftDrop.json\";\n\nimport StakingRewardsFactoryContract from \"../../Contracts/StakingRewards.json\";\nimport { ethers } from \"ethers\"; //DropFactory\n//StakingRewardsFactory\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StakingRewardsFactoryContext = /*#__PURE__*/createContext();\nexport function StakingRewardsFactoryProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const address = StakingRewardsFactoryContract.address;\n  const abi = StakingRewardsFactoryContract.abi;\n  const [StakingRewardsFactory, setStakingRewardsFactory] = useState(null);\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const StakingRewardsFactoryContract = new ethers.Contract(address, abi, signer);\n    setStakingRewardsFactory(StakingRewardsFactoryContract);\n  }, [abi, address]);\n\n  const addLiq = async (_tokenB, _amountTokenB, _amountTokenMin, _amountEthMin) => {\n    try {\n      const tx = await StakingRewardsFactory.addLiquidityEth(\"0x6B175474E89094C44Da98b954EedeAC495271d0F\", _amountTokenB, _amountTokenMin, _amountEthMin, {\n        gasLimit: 750000,\n        value: ethers.utils.parseEther(_amountEth)\n      });\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"added liquidity \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const stakeWithPermit = async (_amount, _deadline, _v, _r, _s) => {\n    try {\n      const tx = await StakingRewardsFactory.stakeWithPermit(_amount, _deadline, _v, _r, _s);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"added liquidity \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const stake = async _amount => {\n    try {\n      const tx = await StakingRewardsFactory.stake(ethers.BigNumber.from(ethers.BigNumber.from(_amount)));\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"stake token LP \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const unstake = async _amount => {\n    try {\n      const tx = await StakingRewardsFactory.unstake(_amount);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"unstake token LP \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const claimTokens = async _amount => {\n    try {\n      const tx = await StakingRewardsFactory.claimTokens(_amount);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"unstake token LP \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StakingRewardsFactoryContext.Provider, {\n    value: {\n      address,\n      abi,\n      StakingRewardsFactory,\n      addLiq,\n      stake,\n      unstake,\n      claimTokens,\n      stakeWithPermit\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(StakingRewardsFactoryProvider, \"4p4SvdhB1ZJPKGtbW+le9+h5fmY=\");\n\n_c = StakingRewardsFactoryProvider;\nexport default StakingRewardsFactoryContext;\n/*\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport { ethers } from \"ethers\";\n\nconst DropFactoryContext = createContext();\n\nexport function DropFactoryProvider({ children }) {\n  const address = DropFactoryContract.address;\n  const abi = DropFactoryContract.abi;\n  const [dropFactory, setDropFactory] = useState(null);\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const dropFactoryContract = new ethers.Contract(address, abi, signer);\n    setDropFactory(dropFactoryContract);\n  }, [abi, address]);\n\n  const createDrop = async (\n    maxSupply,\n    name,\n    cid,\n    prefix,\n    sufix,\n    hiddenURI,\n    maxPerTx\n  ) => {\n    try {\n      const tx = await dropFactory.createDrop(\n        ethers.BigNumber.from(maxSupply),\n        name,\n        cid,\n        prefix,\n        sufix,\n        hiddenURI,\n        ethers.BigNumber.from(maxPerTx)\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop create succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const totalDrops = async () => {\n    return await dropFactory?.totalDrops();\n  };\n  const getAllDrops = async () => {\n    const dropsCount = await totalDrops();\n    const allDrops = [];\n    for (let i = 0; i < dropsCount; i++) {\n      const drop = await dropFactory.drops(i);\n      allDrops.push(drop);\n    }\n    return allDrops;\n  };\n  const getDropById = async (dropId) => {\n    return await dropFactory?.drops(dropId);\n  };\n  const mintDrop = async (dropId, mintAmount) => {\n    try {\n      const tx = await dropFactory.mint(\n        dropId,\n        ethers.BigNumber.from(mintAmount),\n        {\n          gasLimit: 750000,\n          value: ethers.utils.parseEther(\"0.01\").mul(mintAmount),\n        }\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"mint succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const revealDrop = async(dropId) => {\n    try {\n      const tx = await dropFactory.defineDrop(dropId);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop revealed\" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return (\n    <DropFactoryContext.Provider\n      value={{\n        address,\n        abi,\n        getAllDrops,\n        dropFactory,\n        createDrop,\n        totalDrops,\n        getDropById,\n        mintDrop,\n    revealDrop\n      }}\n    >\n      {children}\n    </DropFactoryContext.Provider>\n  );\n}\nexport default DropFactoryContext;\n\n\n\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"StakingRewardsFactoryProvider\");","map":{"version":3,"sources":["/home/alvaradof/cursoSolidity/solidity-liquidity-staking-front/src/context/StakingRewardsFactory/index.jsx"],"names":["React","createContext","useEffect","useState","StakingRewardsFactoryContract","ethers","StakingRewardsFactoryContext","StakingRewardsFactoryProvider","children","address","abi","StakingRewardsFactory","setStakingRewardsFactory","ethereum","window","alert","provider","providers","Web3Provider","signer","getSigner","Contract","addLiq","_tokenB","_amountTokenB","_amountTokenMin","_amountEthMin","tx","addLiquidityEth","gasLimit","value","utils","parseEther","_amountEth","console","log","wait","hash","error","message","stakeWithPermit","_amount","_deadline","_v","_r","_s","stake","BigNumber","from","unstake","claimTokens"],"mappings":"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":["import React, { createContext, useEffect, useState } from \"react\";\n//import DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport StakingRewardsFactoryContract from \"../../Contracts/StakingRewards.json\";\nimport { ethers } from \"ethers\";\n//DropFactory\n//StakingRewardsFactory\n\nconst StakingRewardsFactoryContext = createContext();\n\nexport function StakingRewardsFactoryProvider({ children }) {\n  const address = StakingRewardsFactoryContract.address;\n  const abi = StakingRewardsFactoryContract.abi;\n  const [StakingRewardsFactory, setStakingRewardsFactory] = useState(null);\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const StakingRewardsFactoryContract = new ethers.Contract(address, abi, signer);\n    setStakingRewardsFactory(StakingRewardsFactoryContract);\n  }, [abi, address]);\n\n\n\n  const addLiq = async (\n      _tokenB,\n      _amountTokenB,\n      _amountTokenMin,\n      _amountEthMin\n      ) => {\n    try {\n      const tx = await StakingRewardsFactory.addLiquidityEth(\n        \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        _amountTokenB,\n        _amountTokenMin,\n        _amountEthMin,\n        {\n          gasLimit: 750000,\n          value: ethers.utils.parseEther(_amountEth),\n        }\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"added liquidity \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n\n  const stakeWithPermit = async (\n    _amount,\n\t\t_deadline,\n\t\t_v,\n\t\t_r,\n\t\t_s\n    ) => {\n  try {\n    const tx = await StakingRewardsFactory.stakeWithPermit(\n      _amount,\n      _deadline,\n      _v,\n      _r,\n      _s\n    );\n    console.log(\"loading...\");\n    await tx.wait();\n    alert(\"added liquidity \" + tx.hash);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\n\n  const stake = async (\n    _amount\n    ) => {\n  try {\n    const tx = await StakingRewardsFactory.stake(\n      ethers.BigNumber.from(ethers.BigNumber.from(_amount)),      \n    );\n    console.log(\"loading...\");\n    await tx.wait();\n    alert(\"stake token LP \" + tx.hash);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\n\nconst unstake = async (\n    _amount\n    ) => {\ntry {\n    const tx = await StakingRewardsFactory.unstake(\n      _amount      \n    );\n    console.log(\"loading...\");\n    await tx.wait();\n    alert(\"unstake token LP \" + tx.hash);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\n\nconst claimTokens = async (\n    _amount\n    ) => {\ntry {\n    const tx = await StakingRewardsFactory.claimTokens(\n      _amount      \n    );\n    console.log(\"loading...\");\n    await tx.wait();\n    alert(\"unstake token LP \" + tx.hash);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\n\n\n  return (\n    <StakingRewardsFactoryContext.Provider\n      value={{\n        address,\n        abi,\n        StakingRewardsFactory,\n        addLiq,\n        stake,\n        unstake,\n        claimTokens,\n        stakeWithPermit\n      }}\n    >\n      {children}\n    </StakingRewardsFactoryContext.Provider>\n  );\n}\nexport default StakingRewardsFactoryContext;\n\n\n\n\n\n\n\n\n/*\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport { ethers } from \"ethers\";\n\nconst DropFactoryContext = createContext();\n\nexport function DropFactoryProvider({ children }) {\n  const address = DropFactoryContract.address;\n  const abi = DropFactoryContract.abi;\n  const [dropFactory, setDropFactory] = useState(null);\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const dropFactoryContract = new ethers.Contract(address, abi, signer);\n    setDropFactory(dropFactoryContract);\n  }, [abi, address]);\n\n  const createDrop = async (\n    maxSupply,\n    name,\n    cid,\n    prefix,\n    sufix,\n    hiddenURI,\n    maxPerTx\n  ) => {\n    try {\n      const tx = await dropFactory.createDrop(\n        ethers.BigNumber.from(maxSupply),\n        name,\n        cid,\n        prefix,\n        sufix,\n        hiddenURI,\n        ethers.BigNumber.from(maxPerTx)\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop create succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const totalDrops = async () => {\n    return await dropFactory?.totalDrops();\n  };\n  const getAllDrops = async () => {\n    const dropsCount = await totalDrops();\n    const allDrops = [];\n    for (let i = 0; i < dropsCount; i++) {\n      const drop = await dropFactory.drops(i);\n      allDrops.push(drop);\n    }\n    return allDrops;\n  };\n  const getDropById = async (dropId) => {\n    return await dropFactory?.drops(dropId);\n  };\n  const mintDrop = async (dropId, mintAmount) => {\n    try {\n      const tx = await dropFactory.mint(\n        dropId,\n        ethers.BigNumber.from(mintAmount),\n        {\n          gasLimit: 750000,\n          value: ethers.utils.parseEther(\"0.01\").mul(mintAmount),\n        }\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"mint succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const revealDrop = async(dropId) => {\n    try {\n      const tx = await dropFactory.defineDrop(dropId);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop revealed\" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return (\n    <DropFactoryContext.Provider\n      value={{\n        address,\n        abi,\n        getAllDrops,\n        dropFactory,\n        createDrop,\n        totalDrops,\n        getDropById,\n        mintDrop,\n    revealDrop\n      }}\n    >\n      {children}\n    </DropFactoryContext.Provider>\n  );\n}\nexport default DropFactoryContext;\n\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}