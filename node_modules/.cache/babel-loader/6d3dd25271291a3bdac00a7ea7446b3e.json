{"ast":null,"code":"var _jsxFileName = \"/home/racso/Programming/solidity-stake/solidity-liquidity-staking-front/src/context/StakeManager/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useContext, useState } from \"react\";\nimport stakingManagerInfo from \"../../contracts/StakingManager.json\";\nimport { ethers } from \"ethers\";\nimport WalletContext from \"../Wallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StakeManagerContext = /*#__PURE__*/createContext();\nexport function StakeManagerProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    signer\n  } = useContext(WalletContext);\n  const [stakingManager, setStakingManager] = useState(null);\n  const [poolTokens, setPoolTokens] = useState([]);\n  const address = stakingManagerInfo.address;\n  const abi = stakingManagerInfo.abi; // 1\n\n  useEffect(() => {\n    const stakeContract = new ethers.Contract(address, abi, signer);\n    setStakingManager(stakeContract);\n\n    (async () => {\n      const pools = await stakeContract.stakingTokens().length;\n      console.log(pools);\n    })();\n  }, [signer]);\n  return /*#__PURE__*/_jsxDEV(StakeManagerContext.Provider, {\n    value: {\n      address,\n      abi,\n      stakingManager\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StakeManagerProvider, \"8vlPf39HSdIwKMztsNt4OCup6q4=\");\n\n_c = StakeManagerProvider;\nexport default StakeManagerContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeManagerProvider\");","map":{"version":3,"sources":["/home/racso/Programming/solidity-stake/solidity-liquidity-staking-front/src/context/StakeManager/index.jsx"],"names":["createContext","useEffect","useContext","useState","stakingManagerInfo","ethers","WalletContext","StakeManagerContext","StakeManagerProvider","children","signer","stakingManager","setStakingManager","poolTokens","setPoolTokens","address","abi","stakeContract","Contract","pools","stakingTokens","length","console","log"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,aAAP,MAA0B,WAA1B;;AAEA,MAAMC,mBAAmB,gBAAGP,aAAa,EAAzC;AAEA,OAAO,SAASQ,oBAAT,OAA4C;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAaR,UAAU,CAACI,aAAD,CAA7B;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMY,OAAO,GAAGX,kBAAkB,CAACW,OAAnC;AACA,QAAMC,GAAG,GAAGZ,kBAAkB,CAACY,GAA/B,CALiD,CAMjD;;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,aAAa,GAAG,IAAIZ,MAAM,CAACa,QAAX,CAAoBH,OAApB,EAA6BC,GAA7B,EAAkCN,MAAlC,CAAtB;AACAE,IAAAA,iBAAiB,CAACK,aAAD,CAAjB;;AACA,KAAC,YAAY;AACX,YAAME,KAAK,GAAG,MAAMF,aAAa,CAACG,aAAd,GAA8BC,MAAlD;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACD,KAHD;AAID,GAPQ,EAON,CAACT,MAAD,CAPM,CAAT;AASA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAAEK,MAAAA,OAAF;AAAWC,MAAAA,GAAX;AAAgBL,MAAAA;AAAhB,KAArC;AAAA,cACGF;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAtBeD,oB;;KAAAA,oB;AAwBhB,eAAeD,mBAAf","sourcesContent":["import { createContext, useEffect, useContext, useState } from \"react\";\nimport stakingManagerInfo from \"../../contracts/StakingManager.json\";\nimport { ethers } from \"ethers\";\nimport WalletContext from \"../Wallet\";\n\nconst StakeManagerContext = createContext();\n\nexport function StakeManagerProvider({ children }) {\n  const { signer } = useContext(WalletContext);\n  const [stakingManager, setStakingManager] = useState(null);\n  const [poolTokens, setPoolTokens] = useState([]);\n  const address = stakingManagerInfo.address;\n  const abi = stakingManagerInfo.abi;\n  // 1\n\n  useEffect(() => {\n    const stakeContract = new ethers.Contract(address, abi, signer);\n    setStakingManager(stakeContract);\n    (async () => {\n      const pools = await stakeContract.stakingTokens().length;\n      console.log(pools);\n    })();\n  }, [signer]);\n\n  return (\n    <StakeManagerContext.Provider value={{ address, abi, stakingManager }}>\n      {children}\n    </StakeManagerContext.Provider>\n  );\n}\n\nexport default StakeManagerContext;\n"]},"metadata":{},"sourceType":"module"}