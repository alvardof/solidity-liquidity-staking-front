{"ast":null,"code":"var _jsxFileName = \"/home/alvaradof/cursoSolidity/solidity-liquidity-staking-front/src/context/DropFactory/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\"; //import DropFactoryContract from \"../../Contracts/NftDrop.json\";\n\nimport RewardTokenContract from \"../../Contracts/RewardToken.json\";\nimport { ethers } from \"ethers\"; //const DropFactoryContext = createContext();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RewardTokenFactoryContext = /*#__PURE__*/createContext();\nexport function RewardTokenFactoryProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const address = RewardTokenContract.address;\n  const abi = RewardTokenContract.abi;\n  const [RewardTokendropFactory, setDropFactory] = useState(null);\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const RewardTokenContract = new ethers.Contract(address, abi, signer);\n    setDropFactory(RewardTokenContract);\n  }, [abi, address]);\n\n  const createDrop = async (maxSupply, name, cid, prefix, sufix, hiddenURI, maxPerTx) => {\n    try {\n      const tx = await RewardTokendropFactory.createDrop(ethers.BigNumber.from(maxSupply), name, cid, prefix, sufix, hiddenURI, ethers.BigNumber.from(maxPerTx));\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop create succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(RewardTokenFactoryContext.Provider, {\n    value: {\n      address,\n      abi,\n      createDrop\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RewardTokenFactoryProvider, \"XW46KjhTpfbTMapRrSI4zNWJQMs=\");\n\n_c = RewardTokenFactoryProvider;\nexport default RewardTokenFactoryContext;\n/*import React, { createContext, useEffect, useState } from \"react\";\nimport DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport { ethers } from \"ethers\";\n\nconst DropFactoryContext = createContext();\n\nexport function DropFactoryProvider({ children }) {\n  const address = DropFactoryContract.address;\n  const abi = DropFactoryContract.abi;\n  const [dropFactory, setDropFactory] = useState(null);\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const dropFactoryContract = new ethers.Contract(address, abi, signer);\n    setDropFactory(dropFactoryContract);\n  }, [abi, address]);\n\n  const createDrop = async (\n    maxSupply,\n    name,\n    cid,\n    prefix,\n    sufix,\n    hiddenURI,\n    maxPerTx\n  ) => {\n    try {\n      const tx = await dropFactory.createDrop(\n        ethers.BigNumber.from(maxSupply),\n        name,\n        cid,\n        prefix,\n        sufix,\n        hiddenURI,\n        ethers.BigNumber.from(maxPerTx)\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop create succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const totalDrops = async () => {\n    return await dropFactory?.totalDrops();\n  };\n  const getAllDrops = async () => {\n    const dropsCount = await totalDrops();\n    const allDrops = [];\n    for (let i = 0; i < dropsCount; i++) {\n      const drop = await dropFactory.drops(i);\n      allDrops.push(drop);\n    }\n    return allDrops;\n  };\n  const getDropById = async (dropId) => {\n    return await dropFactory?.drops(dropId);\n  };\n  const mintDrop = async (dropId, mintAmount) => {\n    try {\n      const tx = await dropFactory.mint(\n        dropId,\n        ethers.BigNumber.from(mintAmount),\n        {\n          gasLimit: 750000,\n          value: ethers.utils.parseEther(\"0.01\").mul(mintAmount),\n        }\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"mint succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const revealDrop = async(dropId) => {\n    try {\n      const tx = await dropFactory.defineDrop(dropId);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop revealed\" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return (\n    <DropFactoryContext.Provider\n      value={{\n        address,\n        abi,\n        getAllDrops,\n        dropFactory,\n        createDrop,\n        totalDrops,\n        getDropById,\n        mintDrop,\n    revealDrop\n      }}\n    >\n      {children}\n    </DropFactoryContext.Provider>\n  );\n}\nexport default DropFactoryContext;\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"RewardTokenFactoryProvider\");","map":{"version":3,"sources":["/home/alvaradof/cursoSolidity/solidity-liquidity-staking-front/src/context/DropFactory/index.jsx"],"names":["React","createContext","useEffect","useState","RewardTokenContract","ethers","RewardTokenFactoryContext","RewardTokenFactoryProvider","children","address","abi","RewardTokendropFactory","setDropFactory","ethereum","window","alert","provider","providers","Web3Provider","signer","getSigner","Contract","createDrop","maxSupply","name","cid","prefix","sufix","hiddenURI","maxPerTx","tx","BigNumber","from","console","log","wait","hash","error","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D,C,CACA;;AACA,OAAOC,mBAAP,MAAgC,kCAAhC;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CAEA;;;AACA,MAAMC,yBAAyB,gBAAGL,aAAa,EAA/C;AAGA,OAAO,SAASM,0BAAT,OAAkD;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACvD,QAAMC,OAAO,GAAGL,mBAAmB,CAACK,OAApC;AACA,QAAMC,GAAG,GAAGN,mBAAmB,CAACM,GAAhC;AACA,QAAM,CAACC,sBAAD,EAAyBC,cAAzB,IAA2CT,QAAQ,CAAC,IAAD,CAAzD;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEW,MAAAA;AAAF,QAAeC,MAArB;AACA,QAAI,CAACD,QAAL,EAAe,OAAOE,KAAK,CAAC,kBAAD,CAAZ;AACf,UAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;AACA,UAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMhB,mBAAmB,GAAG,IAAIC,MAAM,CAACgB,QAAX,CAAoBZ,OAApB,EAA6BC,GAA7B,EAAkCS,MAAlC,CAA5B;AACAP,IAAAA,cAAc,CAACR,mBAAD,CAAd;AACD,GAPQ,EAON,CAACM,GAAD,EAAMD,OAAN,CAPM,CAAT;;AASA,QAAMa,UAAU,GAAG,OACjBC,SADiB,EAEjBC,IAFiB,EAGjBC,GAHiB,EAIjBC,MAJiB,EAKjBC,KALiB,EAMjBC,SANiB,EAOjBC,QAPiB,KAQd;AACH,QAAI;AACF,YAAMC,EAAE,GAAG,MAAMnB,sBAAsB,CAACW,UAAvB,CACfjB,MAAM,CAAC0B,SAAP,CAAiBC,IAAjB,CAAsBT,SAAtB,CADe,EAEfC,IAFe,EAGfC,GAHe,EAIfC,MAJe,EAKfC,KALe,EAMfC,SANe,EAOfvB,MAAM,CAAC0B,SAAP,CAAiBC,IAAjB,CAAsBH,QAAtB,CAPe,CAAjB;AASAI,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,YAAMJ,EAAE,CAACK,IAAH,EAAN;AACApB,MAAAA,KAAK,CAAC,6BAA6Be,EAAE,CAACM,IAAjC,CAAL;AACD,KAbD,CAaE,OAAOC,KAAP,EAAc;AACdtB,MAAAA,KAAK,CAACsB,KAAK,CAACC,OAAP,CAAL;AACD;AACF,GAzBD;;AA6BA,sBACE,QAAC,yBAAD,CAA2B,QAA3B;AACE,IAAA,KAAK,EAAE;AACL7B,MAAAA,OADK;AAELC,MAAAA,GAFK;AAGLY,MAAAA;AAHK,KADT;AAAA,cAOGd;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GArDeD,0B;;KAAAA,0B;AAsDhB,eAAeD,yBAAfsourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n//import DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport RewardTokenContract from \"../../Contracts/RewardToken.json\";\nimport { ethers } from \"ethers\";\n\n//const DropFactoryContext = createContext();\nconst RewardTokenFactoryContext = createContext();\n\n\nexport function RewardTokenFactoryProvider({ children }) {\n  const address = RewardTokenContract.address;\n  const abi = RewardTokenContract.abi;\n  const [RewardTokendropFactory, setDropFactory] = useState(null);\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const RewardTokenContract = new ethers.Contract(address, abi, signer);\n    setDropFactory(RewardTokenContract);\n  }, [abi, address]);\n\n  const createDrop = async (\n    maxSupply,\n    name,\n    cid,\n    prefix,\n    sufix,\n    hiddenURI,\n    maxPerTx\n  ) => {\n    try {\n      const tx = await RewardTokendropFactory.createDrop(\n        ethers.BigNumber.from(maxSupply),\n        name,\n        cid,\n        prefix,\n        sufix,\n        hiddenURI,\n        ethers.BigNumber.from(maxPerTx)\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop create succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  \n  \n\n  return (\n    <RewardTokenFactoryContext.Provider\n      value={{\n        address,\n        abi,\n        createDrop\n      }}\n    >\n      {children}\n    </RewardTokenFactoryContext.Provider>\n  );\n}\nexport default RewardTokenFactoryContext;\n\n\n\n\n\n\n/*import React, { createContext, useEffect, useState } from \"react\";\nimport DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport { ethers } from \"ethers\";\n\nconst DropFactoryContext = createContext();\n\nexport function DropFactoryProvider({ children }) {\n  const address = DropFactoryContract.address;\n  const abi = DropFactoryContract.abi;\n  const [dropFactory, setDropFactory] = useState(null);\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const dropFactoryContract = new ethers.Contract(address, abi, signer);\n    setDropFactory(dropFactoryContract);\n  }, [abi, address]);\n\n  const createDrop = async (\n    maxSupply,\n    name,\n    cid,\n    prefix,\n    sufix,\n    hiddenURI,\n    maxPerTx\n  ) => {\n    try {\n      const tx = await dropFactory.createDrop(\n        ethers.BigNumber.from(maxSupply),\n        name,\n        cid,\n        prefix,\n        sufix,\n        hiddenURI,\n        ethers.BigNumber.from(maxPerTx)\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop create succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const totalDrops = async () => {\n    return await dropFactory?.totalDrops();\n  };\n  const getAllDrops = async () => {\n    const dropsCount = await totalDrops();\n    const allDrops = [];\n    for (let i = 0; i < dropsCount; i++) {\n      const drop = await dropFactory.drops(i);\n      allDrops.push(drop);\n    }\n    return allDrops;\n  };\n  const getDropById = async (dropId) => {\n    return await dropFactory?.drops(dropId);\n  };\n  const mintDrop = async (dropId, mintAmount) => {\n    try {\n      const tx = await dropFactory.mint(\n        dropId,\n        ethers.BigNumber.from(mintAmount),\n        {\n          gasLimit: 750000,\n          value: ethers.utils.parseEther(\"0.01\").mul(mintAmount),\n        }\n      );\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"mint succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  const revealDrop = async(dropId) => {\n    try {\n      const tx = await dropFactory.defineDrop(dropId);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop revealed\" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return (\n    <DropFactoryContext.Provider\n      value={{\n        address,\n        abi,\n        getAllDrops,\n        dropFactory,\n        createDrop,\n        totalDrops,\n        getDropById,\n        mintDrop,\n    revealDrop\n      }}\n    >\n      {children}\n    </DropFactoryContext.Provider>\n  );\n}\nexport default DropFactoryContext;\n*/"]},"metadata":{},"sourceType":"module"}