{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gorka\\\\Documents\\\\Solidity Course\\\\front2\\\\solidity-liquidity-staking-front-1\\\\src\\\\context\\\\DropFactory\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport DropFactoryContract from \"../../Contracts/NftDrop.json\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DropFactoryContext = /*#__PURE__*/createContext();\nexport function DropFactoryProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const address = DropFactoryContract.address;\n  const abi = DropFactoryContract.abi;\n  const [dropFactory, setDropFactory] = useState(null);\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) return alert(\"Install metamask\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const dropFactoryContract = new ethers.Contract(address, abi, signer);\n    setDropFactory(dropFactoryContract);\n  }, [abi, address]);\n\n  const createDrop = async (maxSupply, name, cid, prefix, sufix, hiddenURI, maxPerTx) => {\n    try {\n      const tx = await dropFactory.createDrop(ethers.BigNumber.from(maxSupply), name, cid, prefix, sufix, hiddenURI, ethers.BigNumber.from(maxPerTx));\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop create succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const totalDrops = async () => {\n    return await (dropFactory === null || dropFactory === void 0 ? void 0 : dropFactory.totalDrops());\n  };\n\n  const getAllDrops = async () => {\n    const dropsCount = await totalDrops();\n    const allDrops = [];\n\n    for (let i = 0; i < dropsCount; i++) {\n      const drop = await dropFactory.drops(i);\n      allDrops.push(drop);\n    }\n\n    return allDrops;\n  };\n\n  const getDropById = async dropId => {\n    return await (dropFactory === null || dropFactory === void 0 ? void 0 : dropFactory.drops(dropId));\n  };\n\n  const mintDrop = async (dropId, mintAmount) => {\n    try {\n      const tx = await dropFactory.mint(dropId, ethers.BigNumber.from(mintAmount), {\n        gasLimit: 750000,\n        value: ethers.utils.parseEther(\"0.01\").mul(mintAmount)\n      });\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"mint succesfully \" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const revealDrop = async dropId => {\n    try {\n      const tx = await dropFactory.defineDrop(dropId);\n      console.log(\"loading...\");\n      await tx.wait();\n      alert(\"drop revealed\" + tx.hash);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DropFactoryContext.Provider, {\n    value: {\n      address,\n      abi,\n      getAllDrops,\n      dropFactory,\n      createDrop,\n      totalDrops,\n      getDropById,\n      mintDrop,\n      revealDrop\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DropFactoryProvider, \"lLZDu8NoQfs/9VoMJpv1nq51F24=\");\n\n_c = DropFactoryProvider;\nexport default DropFactoryContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropFactoryProvider\");","map":{"version":3,"sources":["C:/Users/gorka/Documents/Solidity Course/front2/solidity-liquidity-staking-front-1/src/context/DropFactory/index.jsx"],"names":["React","createContext","useEffect","useState","DropFactoryContract","ethers","DropFactoryContext","DropFactoryProvider","children","address","abi","dropFactory","setDropFactory","ethereum","window","alert","provider","providers","Web3Provider","signer","getSigner","dropFactoryContract","Contract","createDrop","maxSupply","name","cid","prefix","sufix","hiddenURI","maxPerTx","tx","BigNumber","from","console","log","wait","hash","error","message","totalDrops","getAllDrops","dropsCount","allDrops","i","drop","drops","push","getDropById","dropId","mintDrop","mintAmount","mint","gasLimit","value","utils","parseEther","mul","revealDrop","defineDrop"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport DropFactoryContract from \"../../Contracts/NftDrop.json\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst DropFactoryContext = createContext();\r\n\r\nexport function DropFactoryProvider({ children }) {\r\n  const address = DropFactoryContract.address;\r\n  const abi = DropFactoryContract.abi;\r\n  const [dropFactory, setDropFactory] = useState(null);\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n    if (!ethereum) return alert(\"Install metamask\");\r\n    const provider = new ethers.providers.Web3Provider(ethereum);\r\n    const signer = provider.getSigner();\r\n    const dropFactoryContract = new ethers.Contract(address, abi, signer);\r\n    setDropFactory(dropFactoryContract);\r\n  }, [abi, address]);\r\n\r\n  const createDrop = async (\r\n    maxSupply,\r\n    name,\r\n    cid,\r\n    prefix,\r\n    sufix,\r\n    hiddenURI,\r\n    maxPerTx\r\n  ) => {\r\n    try {\r\n      const tx = await dropFactory.createDrop(\r\n        ethers.BigNumber.from(maxSupply),\r\n        name,\r\n        cid,\r\n        prefix,\r\n        sufix,\r\n        hiddenURI,\r\n        ethers.BigNumber.from(maxPerTx)\r\n      );\r\n      console.log(\"loading...\");\r\n      await tx.wait();\r\n      alert(\"drop create succesfully \" + tx.hash);\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n  const totalDrops = async () => {\r\n    return await dropFactory?.totalDrops();\r\n  };\r\n  const getAllDrops = async () => {\r\n    const dropsCount = await totalDrops();\r\n    const allDrops = [];\r\n    for (let i = 0; i < dropsCount; i++) {\r\n      const drop = await dropFactory.drops(i);\r\n      allDrops.push(drop);\r\n    }\r\n    return allDrops;\r\n  };\r\n  const getDropById = async (dropId) => {\r\n    return await dropFactory?.drops(dropId);\r\n  };\r\n  const mintDrop = async (dropId, mintAmount) => {\r\n    try {\r\n      const tx = await dropFactory.mint(\r\n        dropId,\r\n        ethers.BigNumber.from(mintAmount),\r\n        {\r\n          gasLimit: 750000,\r\n          value: ethers.utils.parseEther(\"0.01\").mul(mintAmount),\r\n        }\r\n      );\r\n      console.log(\"loading...\");\r\n      await tx.wait();\r\n      alert(\"mint succesfully \" + tx.hash);\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n  const revealDrop = async(dropId) => {\r\n    try {\r\n      const tx = await dropFactory.defineDrop(dropId);\r\n      console.log(\"loading...\");\r\n      await tx.wait();\r\n      alert(\"drop revealed\" + tx.hash);\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DropFactoryContext.Provider\r\n      value={{\r\n        address,\r\n        abi,\r\n        getAllDrops,\r\n        dropFactory,\r\n        createDrop,\r\n        totalDrops,\r\n        getDropById,\r\n        mintDrop,\r\n    revealDrop\r\n      }}\r\n    >\r\n      {children}\r\n    </DropFactoryContext.Provider>\r\n  );\r\n}\r\nexport default DropFactoryContext;\r\n"]},"metadata":{},"sourceType":"module"}