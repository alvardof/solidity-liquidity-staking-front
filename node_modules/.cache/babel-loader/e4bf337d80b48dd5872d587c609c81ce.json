{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\r\n *  Notes:\r\n *\r\n *  This provider differs a bit from the polling providers. One main\r\n *  difference is how it handles consistency. The polling providers\r\n *  will stall responses to ensure a consistent state, while this\r\n *  WebSocket provider assumes the connected backend will manage this.\r\n *\r\n *  For example, if a polling provider emits an event which indicates\r\n *  the event occurred in blockhash XXX, a call to fetch that block by\r\n *  its hash XXX, if not present will retry until it is present. This\r\n *  can occur when querying a pool of nodes that are mildly out of sync\r\n *  with each other.\r\n */\n\nlet NextId = 1; // For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n  constructor(url, network) {\n    // This will be added in the future; please open an issue to expedite\n    if (network === \"any\") {\n      logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"network:any\"\n      });\n    }\n\n    if (typeof url === \"string\") {\n      super(url, network);\n    } else {\n      super(\"_websocket\", network);\n    }\n\n    this._pollingInterval = -1;\n    this._wsReady = false;\n\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n    } else {\n      defineReadOnly(this, \"_websocket\", url);\n    }\n\n    defineReadOnly(this, \"_requests\", {});\n    defineReadOnly(this, \"_subs\", {});\n    defineReadOnly(this, \"_subIds\", {});\n    defineReadOnly(this, \"_detectNetwork\", super.detectNetwork()); // Stall sending requests until the socket is open...\n\n    this.websocket.onopen = () => {\n      this._wsReady = true;\n      Object.keys(this._requests).forEach(id => {\n        this.websocket.send(this._requests[id].payload);\n      });\n    };\n\n    this.websocket.onmessage = messageEvent => {\n      const data = messageEvent.data;\n      const result = JSON.parse(data);\n\n      if (result.id != null) {\n        const id = String(result.id);\n        const request = this._requests[id];\n        delete this._requests[id];\n\n        if (result.result !== undefined) {\n          request.callback(null, result.result);\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: JSON.parse(request.payload),\n            response: result.result,\n            provider: this\n          });\n        } else {\n          let error = null;\n\n          if (result.error) {\n            error = new Error(result.error.message || \"unknown error\");\n            defineReadOnly(error, \"code\", result.error.code || null);\n            defineReadOnly(error, \"response\", data);\n          } else {\n            error = new Error(\"unknown error\");\n          }\n\n          request.callback(error, undefined);\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: JSON.parse(request.payload),\n            provider: this\n          });\n        }\n      } else if (result.method === \"eth_subscription\") {\n        // Subscription...\n        const sub = this._subs[result.params.subscription];\n\n        if (sub) {\n          //this.emit.apply(this,                  );\n          sub.processFunc(result.params.result);\n        }\n      } else {\n        console.warn(\"this should not happen\");\n      }\n    }; // This Provider does not actually poll, but we want to trigger\n    // poll events for things that depend on them (like stalling for\n    // block and transaction lookups)\n\n\n    const fauxPoll = setInterval(() => {\n      this.emit(\"poll\");\n    }, 1000);\n\n    if (fauxPoll.unref) {\n      fauxPoll.unref();\n    }\n  } // Cannot narrow the type of _websocket, as that is not backwards compatible\n  // so we add a getter and let the WebSocket be a public API.\n\n\n  get websocket() {\n    return this._websocket;\n  }\n\n  detectNetwork() {\n    return this._detectNetwork;\n  }\n\n  get pollingInterval() {\n    return 0;\n  }\n\n  resetEventsBlock(blockNumber) {\n    logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"resetEventBlock\"\n    });\n  }\n\n  set pollingInterval(value) {\n    logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPollingInterval\"\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return null;\n    });\n  }\n\n  set polling(value) {\n    if (!value) {\n      return;\n    }\n\n    logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPolling\"\n    });\n  }\n\n  send(method, params) {\n    const rid = NextId++;\n    return new Promise((resolve, reject) => {\n      function callback(error, result) {\n        if (error) {\n          return reject(error);\n        }\n\n        return resolve(result);\n      }\n\n      const payload = JSON.stringify({\n        method: method,\n        params: params,\n        id: rid,\n        jsonrpc: \"2.0\"\n      });\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: JSON.parse(payload),\n        provider: this\n      });\n      this._requests[String(rid)] = {\n        callback,\n        payload\n      };\n\n      if (this._wsReady) {\n        this.websocket.send(payload);\n      }\n    });\n  }\n\n  static defaultUrl() {\n    return \"ws:/\\/localhost:8546\";\n  }\n\n  _subscribe(tag, param, processFunc) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let subIdPromise = this._subIds[tag];\n\n      if (subIdPromise == null) {\n        subIdPromise = Promise.all(param).then(param => {\n          return this.send(\"eth_subscribe\", param);\n        });\n        this._subIds[tag] = subIdPromise;\n      }\n\n      const subId = yield subIdPromise;\n      this._subs[subId] = {\n        tag,\n        processFunc\n      };\n    });\n  }\n\n  _startEvent(event) {\n    switch (event.type) {\n      case \"block\":\n        this._subscribe(\"block\", [\"newHeads\"], result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit(\"block\", blockNumber);\n        });\n\n        break;\n\n      case \"pending\":\n        this._subscribe(\"pending\", [\"newPendingTransactions\"], result => {\n          this.emit(\"pending\", result);\n        });\n\n        break;\n\n      case \"filter\":\n        this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n\n          this.emit(event.filter, this.formatter.filterLog(result));\n        });\n\n        break;\n\n      case \"tx\":\n        {\n          const emitReceipt = event => {\n            const hash = event.hash;\n            this.getTransactionReceipt(hash).then(receipt => {\n              if (!receipt) {\n                return;\n              }\n\n              this.emit(hash, receipt);\n            });\n          }; // In case it is already mined\n\n\n          emitReceipt(event); // To keep things simple, we start up a single newHeads subscription\n          // to keep an eye out for transactions we are watching for.\n          // Starting a subscription for an event (i.e. \"tx\") that is already\n          // running is (basically) a nop.\n\n          this._subscribe(\"tx\", [\"newHeads\"], result => {\n            this._events.filter(e => e.type === \"tx\").forEach(emitReceipt);\n          });\n\n          break;\n        }\n      // Nothing is needed\n\n      case \"debug\":\n      case \"poll\":\n      case \"willPoll\":\n      case \"didPoll\":\n      case \"error\":\n        break;\n\n      default:\n        console.log(\"unhandled:\", event);\n        break;\n    }\n  }\n\n  _stopEvent(event) {\n    let tag = event.tag;\n\n    if (event.type === \"tx\") {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === \"tx\").length) {\n        return;\n      }\n\n      tag = \"tx\";\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n\n      delete this._subs[subId];\n      this.send(\"eth_unsubscribe\", [subId]);\n    });\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Wait until we have connected before trying to disconnect\n      if (this.websocket.readyState === WebSocket.CONNECTING) {\n        yield new Promise(resolve => {\n          this.websocket.onopen = function () {\n            resolve(true);\n          };\n\n          this.websocket.onerror = function () {\n            resolve(false);\n          };\n        });\n      } // Hangup\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n\n\n      this.websocket.close(1000);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BigNumber","defineReadOnly","JsonRpcProvider","WebSocket","Logger","version","logger","NextId","WebSocketProvider","constructor","url","network","throwError","errors","UNSUPPORTED_OPERATION","operation","_pollingInterval","_wsReady","connection","detectNetwork","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","error","Error","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","pollingInterval","resetEventsBlock","blockNumber","value","poll","polling","rid","Promise","resolve","reject","stringify","jsonrpc","defaultUrl","_subscribe","tag","param","subIdPromise","_subIds","all","then","subId","_startEvent","event","type","from","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","_stopEvent","length","listenerCount","destroy","readyState","CONNECTING","onerror","close"],"sources":["C:\\Users\\gorka\\Documents\\Solidity Course\\front2\\solidity-liquidity-staking-front-1\\node_modules\\@ethersproject\\providers\\src.ts\\websocket-provider.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { Network, Networkish } from \"@ethersproject/networks\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\n\r\nimport { Event } from \"./base-provider\";\r\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\r\nimport { WebSocket } from \"./ws\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\n/**\r\n *  Notes:\r\n *\r\n *  This provider differs a bit from the polling providers. One main\r\n *  difference is how it handles consistency. The polling providers\r\n *  will stall responses to ensure a consistent state, while this\r\n *  WebSocket provider assumes the connected backend will manage this.\r\n *\r\n *  For example, if a polling provider emits an event which indicates\r\n *  the event occurred in blockhash XXX, a call to fetch that block by\r\n *  its hash XXX, if not present will retry until it is present. This\r\n *  can occur when querying a pool of nodes that are mildly out of sync\r\n *  with each other.\r\n */\r\n\r\nlet NextId = 1;\r\n\r\nexport type InflightRequest = {\r\n     callback: (error: Error, result: any) => void;\r\n     payload: string;\r\n};\r\n\r\nexport type Subscription = {\r\n    tag: string;\r\n    processFunc: (payload: any) => void;\r\n};\r\n\r\nexport interface WebSocketLike {\r\n    onopen: (...args: Array<any>) => any;\r\n    onmessage: (...args: Array<any>) => any;\r\n    onerror: (...args: Array<any>) => any;\r\n\r\n    readyState: number;\r\n\r\n    send(payload: any): void;\r\n    close(code?: number, reason?: string): void;\r\n}\r\n\r\n// For more info about the Real-time Event API see:\r\n//   https://geth.ethereum.org/docs/rpc/pubsub\r\n\r\nexport class WebSocketProvider extends JsonRpcProvider {\r\n    readonly _websocket: any;\r\n    readonly _requests: { [ name: string ]: InflightRequest };\r\n    readonly _detectNetwork: Promise<Network>;\r\n\r\n    // Maps event tag to subscription ID (we dedupe identical events)\r\n    readonly _subIds: { [ tag: string ]: Promise<string> };\r\n\r\n    // Maps Subscription ID to Subscription\r\n    readonly _subs: { [ name: string ]: Subscription };\r\n\r\n    _wsReady: boolean;\r\n\r\n    constructor(url: string | WebSocketLike, network?: Networkish) {\r\n\r\n        // This will be added in the future; please open an issue to expedite\r\n        if (network === \"any\") {\r\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"network:any\"\r\n            });\r\n        }\r\n\r\n        if (typeof(url) === \"string\") {\r\n            super(url, network);\r\n        } else {\r\n            super(\"_websocket\", network);\r\n        }\r\n\r\n        this._pollingInterval = -1;\r\n\r\n        this._wsReady = false;\r\n\r\n        if (typeof(url) === \"string\") {\r\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\r\n        } else {\r\n            defineReadOnly(this, \"_websocket\", url);\r\n        }\r\n\r\n        defineReadOnly(this, \"_requests\", { });\r\n        defineReadOnly(this, \"_subs\", { });\r\n        defineReadOnly(this, \"_subIds\", { });\r\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\r\n\r\n        // Stall sending requests until the socket is open...\r\n        this.websocket.onopen = () => {\r\n            this._wsReady = true;\r\n            Object.keys(this._requests).forEach((id) => {\r\n                this.websocket.send(this._requests[id].payload);\r\n            });\r\n        };\r\n\r\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\r\n            const data = messageEvent.data;\r\n            const result = JSON.parse(data);\r\n            if (result.id != null) {\r\n                const id = String(result.id);\r\n                const request = this._requests[id];\r\n                delete this._requests[id];\r\n\r\n                if (result.result !== undefined) {\r\n                    request.callback(null, result.result);\r\n\r\n                    this.emit(\"debug\", {\r\n                        action: \"response\",\r\n                        request: JSON.parse(request.payload),\r\n                        response: result.result,\r\n                        provider: this\r\n                    });\r\n\r\n                } else {\r\n                    let error: Error = null;\r\n                    if (result.error) {\r\n                        error = new Error(result.error.message || \"unknown error\");\r\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\r\n                        defineReadOnly(<any>error, \"response\", data);\r\n                    } else {\r\n                        error = new Error(\"unknown error\");\r\n                    }\r\n\r\n                    request.callback(error, undefined);\r\n\r\n                    this.emit(\"debug\", {\r\n                        action: \"response\",\r\n                        error: error,\r\n                        request: JSON.parse(request.payload),\r\n                        provider: this\r\n                    });\r\n\r\n                }\r\n\r\n            } else if (result.method === \"eth_subscription\") {\r\n                // Subscription...\r\n                const sub = this._subs[result.params.subscription];\r\n                if (sub) {\r\n                    //this.emit.apply(this,                  );\r\n                    sub.processFunc(result.params.result)\r\n                }\r\n\r\n            } else {\r\n                console.warn(\"this should not happen\");\r\n            }\r\n        };\r\n\r\n        // This Provider does not actually poll, but we want to trigger\r\n        // poll events for things that depend on them (like stalling for\r\n        // block and transaction lookups)\r\n        const fauxPoll = setInterval(() => {\r\n            this.emit(\"poll\");\r\n        }, 1000);\r\n        if (fauxPoll.unref) { fauxPoll.unref(); }\r\n    }\r\n\r\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\r\n    // so we add a getter and let the WebSocket be a public API.\r\n    get websocket(): WebSocketLike { return this._websocket; }\r\n\r\n    detectNetwork(): Promise<Network> {\r\n        return this._detectNetwork;\r\n    }\r\n\r\n    get pollingInterval(): number {\r\n        return 0;\r\n    }\r\n\r\n    resetEventsBlock(blockNumber: number): void {\r\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"resetEventBlock\"\r\n        });\r\n    }\r\n\r\n    set pollingInterval(value: number) {\r\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"setPollingInterval\"\r\n        });\r\n    }\r\n\r\n    async poll(): Promise<void> {\r\n        return null;\r\n    }\r\n\r\n    set polling(value: boolean) {\r\n        if (!value) { return; }\r\n\r\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"setPolling\"\r\n        });\r\n    }\r\n\r\n    send(method: string, params?: Array<any>): Promise<any> {\r\n        const rid = NextId++;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            function callback(error: Error, result: any) {\r\n                if (error) { return reject(error); }\r\n                return resolve(result);\r\n            }\r\n\r\n            const payload = JSON.stringify({\r\n                method: method,\r\n                params: params,\r\n                id: rid,\r\n                jsonrpc: \"2.0\"\r\n            });\r\n\r\n            this.emit(\"debug\", {\r\n                action: \"request\",\r\n                request: JSON.parse(payload),\r\n                provider: this\r\n            });\r\n\r\n            this._requests[String(rid)] = { callback, payload };\r\n\r\n            if (this._wsReady) { this.websocket.send(payload); }\r\n        });\r\n    }\r\n\r\n    static defaultUrl(): string {\r\n        return \"ws:/\\/localhost:8546\";\r\n    }\r\n\r\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\r\n        let subIdPromise = this._subIds[tag];\r\n        if (subIdPromise == null) {\r\n            subIdPromise = Promise.all(param).then((param) => {\r\n                return this.send(\"eth_subscribe\", param);\r\n            });\r\n            this._subIds[tag] = subIdPromise;\r\n        }\r\n        const subId = await subIdPromise;\r\n        this._subs[subId] = { tag, processFunc };\r\n    }\r\n\r\n    _startEvent(event: Event): void {\r\n        switch (event.type) {\r\n            case \"block\":\r\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\r\n                    const blockNumber = BigNumber.from(result.number).toNumber();\r\n                    this._emitted.block = blockNumber;\r\n                    this.emit(\"block\", blockNumber);\r\n                });\r\n                break;\r\n\r\n            case \"pending\":\r\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\r\n                    this.emit(\"pending\", result);\r\n                });\r\n                break;\r\n\r\n            case \"filter\":\r\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\r\n                    if (result.removed == null) { result.removed = false; }\r\n                    this.emit(event.filter, this.formatter.filterLog(result));\r\n                });\r\n                break;\r\n\r\n            case \"tx\": {\r\n                const emitReceipt = (event: Event) => {\r\n                    const hash = event.hash;\r\n                    this.getTransactionReceipt(hash).then((receipt) => {\r\n                        if (!receipt) { return; }\r\n                        this.emit(hash, receipt);\r\n                    });\r\n                };\r\n\r\n                // In case it is already mined\r\n                emitReceipt(event);\r\n\r\n                // To keep things simple, we start up a single newHeads subscription\r\n                // to keep an eye out for transactions we are watching for.\r\n                // Starting a subscription for an event (i.e. \"tx\") that is already\r\n                // running is (basically) a nop.\r\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\r\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\r\n                });\r\n                break;\r\n            }\r\n\r\n            // Nothing is needed\r\n            case \"debug\":\r\n            case \"poll\":\r\n            case \"willPoll\":\r\n            case \"didPoll\":\r\n            case \"error\":\r\n                break;\r\n\r\n            default:\r\n                console.log(\"unhandled:\", event);\r\n                break;\r\n        }\r\n    }\r\n\r\n    _stopEvent(event: Event): void {\r\n        let tag = event.tag;\r\n\r\n        if (event.type === \"tx\") {\r\n            // There are remaining transaction event listeners\r\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\r\n                return;\r\n            }\r\n            tag = \"tx\";\r\n        } else if (this.listenerCount(event.event)) {\r\n            // There are remaining event listeners\r\n            return;\r\n        }\r\n\r\n        const subId = this._subIds[tag];\r\n        if (!subId) { return; }\r\n\r\n       delete this._subIds[tag];\r\n       subId.then((subId) => {\r\n            if (!this._subs[subId]) { return; }\r\n            delete this._subs[subId];\r\n            this.send(\"eth_unsubscribe\", [ subId ]);\r\n        });\r\n    }\r\n\r\n    async destroy(): Promise<void> {\r\n        // Wait until we have connected before trying to disconnect\r\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\r\n            await (new Promise((resolve) => {\r\n                this.websocket.onopen = function() {\r\n                    resolve(true);\r\n                };\r\n\r\n                this.websocket.onerror = function() {\r\n                    resolve(false);\r\n                };\r\n            }));\r\n        }\r\n\r\n        // Hangup\r\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\r\n        this.websocket.close(1000);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}